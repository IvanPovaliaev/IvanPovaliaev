using System;
using System.Collections.Generic;

public static class MainMenu
{
    public static List<MenuOption> Options {get;} = new List<MenuOption>
    {
        new MenuOption("Начать тест", MainClass.StartTest),
        new MenuOption("Показать результаты", MainClass.ShowResult),
        new MenuOption("Показать вопросы", MainClass.ShowQuestions),
        new MenuOption("Выход", MainClass.Exit)
    };
}

public class MenuOption
{
    public string MenuDescription {get; private set;}
    public Action Option{get; private set;}
    
    public MenuOption(string MenuDescription, Action Option)
    {
        this.MenuDescription = MenuDescription;
        this.Option = Option;
    }
}

public class MainClass
{
    public static void Main()
    {        
        for (int i = 0; i < MainMenu.Options.Count; i++)
        {
            Console.WriteLine($"{i+1}. {MainMenu.Options[i].MenuDescription}");
            MainMenu.Options[i].Option();
        }
    }
    public static void StartTest()
    {
        Console.WriteLine("StartTest");
    }
    
    public static void ShowResult()
    {
        Console.WriteLine("ShowResult");
    }
    
    public static void ShowQuestions()
    {
        Console.WriteLine("ShowQuestions");
    }
    
    public static void Exit()
    {
        Console.WriteLine("Exit");
    }
}

https://stackoverflow.com/questions/11726348/is-it-possible-to-declare-a-collection-of-many-generic-delegates-with-different

Второй рабочий вариант

using System;
using System.Collections.Generic;

public static class MainMenu
{
    private static int i {get;} = 0;
    public static List<MenuOption> Options {get;} = new List<MenuOption>
    {
        new MenuOption("Начать тест", (Delegate)MainClass.StartTest),
        new MenuOption("Показать результаты", (Delegate)MainClass.ShowResult),
        new MenuOption("Показать вопросы", (Delegate)MainClass.ShowQuestions),
        new MenuOption("Выход", (Delegate)MainClass.Exit)
    };
}

public class MenuOption
{
    public string MenuDescription {get; private set;}
    public Delegate Option{get; private set;}
    
    public MenuOption(string MenuDescription, Delegate Option)
    {
        this.MenuDescription = MenuDescription;
        this.Option = Option;
    }
}

public class MainClass
{
    public static void Main()
    {        
        for (int i = 0; i < MainMenu.Options.Count; i++)
        {
            Console.WriteLine($"{i+1}. {MainMenu.Options[i].MenuDescription}");
            if (MainMenu.Options[i].Option is Action)
            {
                ((Action)MainMenu.Options[i].Option)();
                continue;
            }
            if (MainMenu.Options[i].Option is Action<int>)
            {
                ((Action<int>)MainMenu.Options[i].Option)(4221);
                continue;
            }
            
        }
    }
    public static void StartTest()
    {
        Console.WriteLine("StartTest");
    }
    
    public static void ShowResult(int i)
    {
        Console.WriteLine($"ShowResult. Проверка интересно {i}");
    }
    
    public static void ShowQuestions()
    {
        Console.WriteLine("ShowQuestions");
    }
    
    public static void Exit()
    {
        Console.WriteLine("Exit");
    }
}
