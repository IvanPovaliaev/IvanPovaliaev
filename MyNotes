import clr
clr.AddReference('RevitServices')
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

# Function to convert ARGB color values to Revit Color
def argb_to_color(argb):
    alpha = (argb >> 24) & 255
    red = (argb >> 16) & 255
    green = (argb >> 8) & 255
    blue = argb & 255
    return Color(red, green, blue)

# Get the current Revit document
doc = DocumentManager.Instance.CurrentDBDocument

# Get the active view
active_view = doc.ActiveView

# Check if the active view is a 3D view
if isinstance(active_view, View3D):
    # Get the filters associated with the 3D view
    filters = IN[1]  # Input list of ParameterFilterElement objects
    
    # Input list of ARGB colors
    argb_colors = IN[0]  # ARGB colors input parameter
    
    # Start a transaction
    TransactionManager.Instance.EnsureInTransaction(doc)
    
    # Apply colors to filter hatching based on input colors
    for index, color in enumerate(argb_colors):
        if index < len(filters):
            # Convert ARGB value to Revit Color
            revit_color = argb_to_color(color)
            filter = filters[index]
            # Set the filter color directly
            filter.OverrideColor = revit_color
    
    # Commit the transaction
    TransactionManager.Instance.TransactionTaskDone()

    OUT = filters  # Return the list of active filters
else:
    OUT = None  # Return None if the active view is not a 3D view
